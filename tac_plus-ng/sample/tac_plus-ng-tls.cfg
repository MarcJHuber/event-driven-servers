#!../../../sbin/tac_plus-ng

id = spawnd {
	background = no
#	single process = yes
	listen { port = 4948 haproxy = yes }
	listen { port = 4949 realm = heck tls = yes haproxy = yes }
	listen { port = 4950 realm = heck tls = yes haproxy = yes }
	spawn {
		instances min = 1
		instances max = 1
	}
}

id = tac_plus-ng {
	#debug = PACKET AUTHEN AUTHOR

	log mysyslog { }
	log accesslog { destination = /tmp/access.log }
	log authorlog { destination = /tmp/author.log }
	log authorlog2 { destination = ">/tmp/author2.log" }
	log tlslog {
		destination = /tmp/tls.log
		access format = "%Y-%m-%d %H:%M:%S %z\t${nas}\t${tls-conn-version}\t${tls-peer-cert-issuer}\t${tls-peer-cert-subject}\n"
	}

	access log = mysyslog
	access log = tlslog
	access log = accesslog
	authorization log = authorlog
	accounting log = mysyslog

#	pap password = login

	dns preload file = sample/hosts.txt

	mavis module = tacinfo_cache {
		directory = /tmp/tacinfo0
	}

	mavis module = groups {
		resolve gids = yes
		groups filter = /^(guest|staff|ubuntu)$/
		script out {
			# copy the already filtered UNIX group access list to TACMEMBER
			eval $GIDS =~ /^(.*)$/
			set $TACMEMBER = $1
		}
	}

	mavis module = external {
		exec = /usr/local/sbin/pammavis pammavis -s ssh
		#exec = /usr/local/sbin/pammavis pammavis -s mavis-duo
		childs min = 4
		childs max = 64
	}

	user backend = mavis
	login backend = mavis chpass
	pap backend = mavis

	# This requires PCRE2:
	rewrite toLowerCase {
		rewrite /^.*$/ \L$0
	}

	net private {
		net rfc1918 { address = 10.0.0.0/8,172.16.0.0/12 address = 192.168.0.0/16 }
		net local { address = 127.0.0.1 }
	}

	net filetest {
		address file = sample/addre*ses.txt
	}

	net lab {
		address = 100.67.0.0/23
	}

	net sublab {
		address = 100.67.0.64/28
		parent = lab
	}

	host newworld {
		address = ::/0

		host world {
			address = 0.0.0.0/0
			welcome banner = "Welcome\n"
			enable 15 = clear secret
			key = demo
			host rfc {
				address = 172.16.0.0/12
				address = 10.0.0.1
				motd banner = "Your privilege level is ${priv-lvl}\n"
				welcome banner = "Welcome, you're coming from ${nac}\n"
			}
			#parent = rfc
			rewrite user = toLowerCase
		}
	}


	host localhost {
		address = 127.0.0.1
		welcome banner = "Welcome home\n"
		parent = world
	}

	host demo.tacacstest {
		parent = world
		welcome banner = "Welcome to TLS.\n"
	}

	acl jumpstation { if (nac == 10.255.0.85) permit deny }
	acl demo1 { if (user == demo) permit deny }

	profile admin {
		script {
			if (service == shell) {
			    if (cmd == "") {
				set priv-lvl = 15
				permit
			    }
			    permit
			}
		}
	}

	profile engineering {
		enable 2 = permit
		enable 14 = clear demodemo
		enable 15 = login
		script {
			message = "commandline=${cmd}"
			if (service == shell) {
			    if (cmd == "") {
				# shell startup
				set priv-lvl = 15
				permit
			    }
			    #if (cmd =~ /^ping/) { message = "not now" deny }
			    #if (nas == lab) deny
			    permit
			}
			if (service == demo) {
			    set test = too
			    permit
			}
		}
	}

	profile guest {
		script {
			if (service == shell) {
				set priv-lvl = 1
				permit
			}
			deny
		}
	}

	profile ppp {
		script {
			if (service == ppp) {
				if (arg[protocol] == ip) {
					set addr = 1.2.3.4
					permit
				}
				deny
			}
			deny
		}
	}

	group admin {
		group somegroup
		group engineering { }
	}

	group ubuntu {
		group someothergroup
		group others
	}

	user demo {
		password acl jumpstation { login = permit }

		password login = clear demo
		password pap = login
		member = engineering
	}

	user readonly {
		password {
			pap = clear readonly
			login = clear readonly
		}
	}

	ruleset {
		rule from-localhost {
			enabled = yes
			script {
				if (nas == localhost && nac == private) {
					if (member ==  engineering ) {
						profile = engineering
						permit
					}
					if (member ==  admin) {
						profile = admin
						permit
					}
				}
			}
		}
		rule from-rfc2 {
			enabled = yes
			script {
				if (nas == rfc) {
					if (member ==  admin) {
						profile = admin
						permit
					}
					if (member ==  engineering ) {
						profile = engineering
						permit
					}
				}
			}
		}
	}


	realm heck {
		tls cert-file = /home/ubuntu/tac-ca/server.tacacstest.crt
		tls key-file = /home/ubuntu/tac-ca/server.key
		tls ca-file = /home/ubuntu/tac-ca/ca.crt
		#tls passphrase = demo

		ruleset {
			rule from-rfc {
				enabled = yes
				script {
					if (nas == rfc) {
						if (member ==  engineering ) {
							profile = engineering
							permit
						}
						if (member ==  admin) {
							profile = admin
							permit
						}
						if (member ==  ubuntu ) {
							profile = engineering
								permit
						}
					}
				}
			}
			rule via-cert {
				enabled = yes
				script {
					if (nas == demo.tacacstest) {
						if (member ==  engineering ) {
							profile = engineering
							permit
						}
						if (member ==  admin) {
							profile = admin
							permit
						}
						if (member ==  ubuntu ) {
							profile = engineering
								permit
						}
					}
				}
			}
		}

	}
}
