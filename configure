#!/usr/bin/env perl
#
# configure [args ...]
#
# A trivial configure script.
#
# (C) 2002-2011 by Marc Huber <Marc.Huber@web.de>
# All rights reserved.
#
# $Id: configure,v 1.70 2020/12/29 11:45:08 marc Exp marc $
#

use strict;

my ($sysname, $release, $machine, $cwd);

if (eval("require POSIX")) {
	($sysname, undef, $release, undef, $machine) = POSIX::uname();
	$cwd = POSIX::getcwd();
} else {
	$sysname = `uname -s`;
	$release = `uname -r`;
	$machine = `uname -m`;
	$cwd = `pwd`;
	chomp ($sysname, $release, $machine, $cwd);
}

$sysname =~ tr/ \//--/;
$machine =~ tr/ \//--/;
$release =~ s/\([^)]+\)//; # cygwin ...
$release =~ tr/ \//--/;

$sysname = lc $sysname;
$machine = lc $machine;
$release = lc $release;

my $LIBARCH = undef;

$LIBARCH = "64" if $sysname =~ /linux/i && $machine =~ /64/ && -d "/usr/lib64";

my $aux = "";

my @DIRS_DEFAULT = qw(mavis spawnd mavisd ftpd tac_plus tac_plus-ng tcprelay);
my @ALLDIRS = qw(mavis spawnd mavisd ftpd tac_plus tac_plus-ng tcprelay );
my $DIRS_DEFAULT = join(" ", @DIRS_DEFAULT);
my $ALLDIRS = join(" ", @ALLDIRS);

my @options = qw(lwres pcre pcre2 ssl tls zlib radcli freeradius radcli pam execinfo sctp curl ipc ares);
my %COMMENT;

my $sbin = "sbin";
my $lib = "lib";
my $libarch = "lib$LIBARCH";
my $doc = "share/mavis";

$COMMENT{"devpoll"} =
"This option enables /dev/poll support. You may use it on Linux
with /dev/poll patch (untested), or on a sufficiently recent Sun
Solaris system (7 onwards).";

$COMMENT{"epoll"} =
"Usually, Linux epoll support is autodetected. This option overrides
autodetection, which may be useful if you're using a patched pre-sysepoll
kernel.";

$COMMENT{"lwres"} =
"liblwres, the lightweight resolver library, comes with older versions
of bind, together with lwresd. Enabling this option enables ftpd and
tac_plus to do perform DNS lookups.";

$COMMENT{"ares"} =
"c-ares is a library for asynchronous DNS requests. This option enables ftpd and
tac_plus to do perform DNS lookups.";

$COMMENT{"pcre"} =
"ftpd can use the PCRE (\"Perl Compatible Regular Expressions\") library
for path rewriting, and tac_plus may use it as an alternative to POSIX
regular expression matching. You don't need this library if you don't
care for these features.";

$COMMENT{"pcre2"} =
"ftpd can use the PCRE v2 (\"Perl Compatible Regular Expressions\" v2)
library for path rewriting, and tac_plus may use it as an alternative to
POSIX regular expression matching. You don't need this library if you
don't care for these features.";

$COMMENT{"freeradius"} =
"If you have the freeradius-client library installed, you may authenticate
MAVIS requests by using the radmavis binary.";

$COMMENT{"radcli"} =
"If you have the radcli library installed, you may authenticate
MAVIS requests by using the radmavis binary.";

$COMMENT{"pam"} =
"If you have the pam libraries installed, you may authenticate
MAVIS requests by using the pammavis binary (see mavis/README.pammavis).";

$COMMENT{"curl"} =
"If you have the curl libraries installed, you may use URLs to refer
to configuration files.";

$COMMENT{"ipc"} =
"If SYS-V IPC is available, configuration files may be cached in
shared memory.";

$COMMENT{"ssl"} =
"Use this option if you have the OpenSSL libraries available. If
enabled, TLS support is added to FTPd and TcpRelay, and TACACS+
will be able to utilize the crypto library.";

$COMMENT{"tls"} =
"Use this option if you have the LibreTLS libraries available. If
enabled, TLS support is added to tac_plus-ng and TcpRelay.";

$COMMENT{"sctp"} =
"Use this option if your system supports SCTP.";

$COMMENT{"zlib"} =
"The ftp daemon can support transparent gzip-style compression.
For systems coming with the zlib library in /usr/lib you can probably
skip this section, as the Makefile checks for zlib a that location.";

$COMMENT{"execinfo"} =
"In case of a program crash, execinfo may return a backtrace of the
crashed process, which may be valuable for debugging.";

if ($#ARGV > -1 && $ARGV[0] =~ /^--help$/)
{
	print <<EOT
Please note that this program is *not* a GNU configure program generated
by autoconf, but a custom perl script. It needs to be called from the
top-level PROJECTS directory. There's currently no process in place to
verify that the command line arguments point to the correct files or
directories.

Usage: ./configure [args ...] [targets]

Recognized arguments:	Defaults:
  --prefix=DIR		[/usr/local]
  --bindir=DIR		[/usr/local/bin]
  --etcdir=DIR		[/usr/local/etc]
  --sbindir=DIR		[/usr/local/$sbin]
  --libdir=DIR		[/usr/local/$lib]
  --libarchdir=DIR	[/usr/local/$lib$LIBARCH]
  --libexecdir=DIR	[/usr/local/libexec]
  --docdir=DIR	    [/usr/local/$doc]
  --installroot=DIR	[]

The C compiler used is usually gcc. You may override that choice by
specifiying a different one:
  --with-cc=CC
For example, on MacOS X the following creates universal binaries with
PPC and x86 code, both 32 and 64 bit:
  ./configure "--with-cc=gcc -arch ppc64 -arch ppc -arch i386 -arch x86_64"

$COMMENT{"devpoll"}
  --without-devpoll
  --with-devpoll

$COMMENT{"epoll"}
  --without-epoll
  --with-epoll

$COMMENT{"sctp"}
  --without-sctp
  --with-sctp
EOT
	;

	my $o;
	foreach $o (@options)
	{
		print <<EOT

$COMMENT{$o}
  --without-$o
  --with-$o\[=DIR]
  --with-$o-include=DIR
  --with-$o-lib=DIR
EOT
		;
	}
	print <<EOT

Supported targets:
  $ALLDIRS
Default targets:
  $DIRS_DEFAULT

The Makefile should be smart enough to figure out availability of most
configuration options (OpenSSL, FreeRADIUS-Client, PCRE, LWRES, PAM, SCTP,
ZLIB) by itself, so "./configure" without any arguments is sufficient
in most cases.

EOT
	;
	exit;
}

my %A;

foreach $a (@options)
{
	$A{"--with-$a"} = undef;
}

my $hint = "";
$hint = "(Called without arguments. \"--help\" will display the command " .
"line options.)\n" if $#ARGV < 0;

$A{"--debug"} = 0;

while ($#ARGV > -1)
{
	$ARGV[0] =~ s/-tls/-ssl/;

	if ($ARGV[0] =~ /^(--[^=]+)=(.*)$/)
	{
		$A{$1} = $2;
	}
	elsif ($ARGV[0] =~ /^--([^-]+-[^-]+|debug)$/)
	{
		$A{$ARGV[0]} = "1";
	}
	elsif ($ARGV[0] =~ /^--[^-]+-[^-]+-[^-]+$/)
	{
		$A{$ARGV[0]} = $ARGV[1];
		shift @ARGV;
	}
	else
	{
		$A{$ARGV[0]} = undef;
	}

	shift @ARGV;
}

my $a;

my $DIRS = "";

foreach $a (keys %A)
{
	if ($a =~ /^--with-([^-]+)-include$/)
	{
		$A{"--with-$1"} = "1" unless exists $A{"--with-$1"};

		unless (exists $A{"--with-$1-lib"})
		{
			$A{"--with-$1-lib"} = $A{"--with-$1-include"};
			$A{"--with-$1-lib"} =~ s/include$/lib/;
		}
	}
	elsif ($a =~ /^--with-([^-]+)-lib$/)
	{
		$A{"--with-$1"} = "1" unless exists $A{"--with-$1"};

		unless (exists $A{"--with-$1-include"})
		{
			$A{"--with-$1-include"} = $A{"--with-$1-lib"};
			$A{"--with-$1-include"} =~ s/lib$/include/;
			}
	}
	elsif ($a =~ /^--without-([^-]+)$/)
	{
		$A{"--with-$1"} = "0";
		delete $A{$a};
	} elsif ($a =~ /^mavis$/) {
		$DIRS = "$a$DIRS";
		delete $A{$a};
	} elsif (-d $a) {
		$DIRS .= " $a";
		delete $A{$a};
	}
}

$DIRS = $DIRS_DEFAULT if $DIRS eq "";

if ($DIRS !~ /^mavis /){
	$DIRS = "mavis$DIRS";
}

my $out = "build/Makefile.inc" . "." . lc
$sysname . "-" . $release . "-" . $machine;

my $content = "# Generated by configure at " . localtime () . "\n";

$content .= "DIRS=$DIRS\n" unless $DIRS eq "";

$content .= "BASE=" . $cwd . "\n";

if (exists $A{"--with-devpoll"})
{
	$content .= "WITH_DEVPOLL=" . $A{"--with-devpoll"} . "\n";
	delete $A{"--with-devpoll"};
}

if (exists $A{"--with-epoll"})
{
	$content .= "WITH_EPOLL=" . $A{"--with-epoll"} . "\n";
	delete $A{"--with-epoll"};
}

if (exists $A{"--debug"})
{
	$content .= "DEBUG=" . $A{"--debug"} . "\n";
	delete $A{"--debug"};
}

$A{"--prefix"} = "/usr/local" unless exists $A{"--prefix"};
$content .= "DEST=" . $A{"--prefix"} . "\n";

foreach $a ("bin", "sbin", "etc", "libexec", "lib")
{
	$A{"--$a"."dir"} = $A{"--prefix"} . "/$a" unless exists $A{"--$a"."dir"};
	$content .= uc($a)."DIR_DEST=" . $A{"--$a"."dir"} . "\n";
	delete $A{"--$a"."dir"};
}

my $LIBARCHDIR_DEST;

foreach $a ("libarch")
{
	$A{"--$a"."dir"} = $A{"--prefix"} . "/lib$LIBARCH" unless exists $A{"--$a"."dir"};
	$LIBARCHDIR_DEST = $A{"--$a"."dir"};
	$content .= uc($a)."DIR_DEST=" . $A{"--$a"."dir"} . "\n";
	delete $A{"--$a"."dir"};
}

foreach $a ("doc")
{
	$A{"--$a"."dir"} = $A{"--prefix"} . "/$doc" unless exists $A{"--$a"."dir"};
	$content .= uc($a)."DIR_DEST=" . $A{"--$a"."dir"} . "\n";
	delete $A{"--$a"."dir"};
}

delete $A{"--prefix"};

if (exists $A{"--installroot"})
{
	$content .= "INSTALLROOT=" . $A{"--installroot"} . "\n";
	delete $A{"--installroot"};
}

foreach $a (@options)
{
	if (exists $A{"--with-$a"} && defined $A{"--with-$a"} && $A{"--with-$a"} =~ /^\//)
	{
		$A{"--with-$a-lib"} = $A{"--with-$a"} . "/lib" unless exists $A{"--with-$a-lib"};
		$A{"--with-$a-include"} = $A{"--with-$a"} . "/include" unless exists $A{"--with-$a-include"};
		$A{"--with-$a"} = 1;
	}
}

foreach $a (@options)
{
	if (exists $A{"--with-$a"} && defined $A{"--with-$a"} && $A{"--with-$a"} != 0)
	{
		$A{"--with-$a-lib"} = "/usr/lib" unless exists $A{"--with-$a-lib"};
		$A{"--with-$a-include"} = "/usr/include" unless exists $A{"--with-$a-include"};
	}
}

foreach $a (@options)
{
	if (defined $A{"--with-$a"}) {
		$content .= "WITH_" . uc ($a) . "=" . $A{"--with-$a"} . "\n";

		if (exists $A{"--with-$a"} && defined $A{"--with-$a"} && $A{"--with-$a"} != 0)
		{
			$content .= "LIBDIR_" . uc ($a) . "=" .  $A{"--with-$a-lib"} . "\n";
			delete $A{"--with-$a-lib"};

			$content .= "INCDIR_" . uc ($a) . "=" .  $A{"--with-$a-include"} . "\n";

			delete $A{"--with-$a-include"};
		}
	}

	delete $A{"--with-$a"};
}

$content .= "LIBARCH=$LIBARCH\n" if defined $LIBARCH;

if (exists $A{"--with-cc"})
{
	$content .= "CC=" . $A{"--with-cc"} . "\n";
	my $cc = $A{"--with-cc"};
	delete $A{"--with-cc"};
	my $gcc_multiarch = `$cc -print-multiarch 2>/dev/null || echo`;
	chomp $gcc_multiarch;
	$LIBARCH = "/$gcc_multiarch" if $gcc_multiarch ne "" && -d "/usr/lib/$gcc_multiarch";
}
else
{
	my $gcc_multiarch = `gcc -print-multiarch 2>/dev/null || echo`;
	chomp $gcc_multiarch;
	$LIBARCH = "/$gcc_multiarch" if $gcc_multiarch ne "" && -d "/usr/lib/$gcc_multiarch";
}

my (@rest) = sort keys %A;
if ($#rest > -1)
{
	print <<EOT

The following options were not recognized:

EOT
	;

	while ($#rest > -1)
	{
		print "\t" . shift (@rest) . "\n";
	}

	print <<EOT

Please correct the command line options, then call ./configure again.
"./configure --help" will give you a list of all available options.

EOT
	;
}
else
{
	my $OUT;

	mkdir "build", 0755;
	rename $out, "$out.bak";
	open OUT, ">$out" or die "open ($out): $!";
	print OUT $content;
	close OUT;

	print <<EOT
$hint
The file

    $out

was just created. You may run "make" now. After that, you may wish to do a
"make install". Alternatively, you'll find the compiled binaries (plus some
ancillary scripts) in the

    build/$sysname-$release-$machine/fakeroot/

directory structure. It's probably advisable to have a look there in any case,
as you may or may not like the particular file system layout, and this will
give you a chance to see it before installing.

Please direct support requests to the "Event-Driven Servers" Google Group at:

    event-driven-servers\@googlegroups.com
    http://groups.google.com/group/event-driven-servers

Support requests sent to the author's private email address may be silently
ignored.

EOT
	;
	$out = "spawnd/perl/Makefile.PL";
	open OUT, ">$out" or die "open ($out): $!";
	print OUT <<EOT
use ExtUtils::MakeMaker;
# See lib/ExtUtils/MakeMaker.pm for details of how to influence
# the contents of the Makefile that is written.
WriteMakefile(
   NAMEi	=> 'Scm',
   VERSION_FROM => 'Scm.pm',
   INC		=> '-I../..',
   LIBS		=> '-L$LIBARCHDIR_DEST -lmavis',
   OBJECT	=> 'Scm.o',
);
EOT
	;
	close OUT;
}

# vim: ts=4
